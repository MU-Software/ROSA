import http
import io
import logging
import pathlib
import traceback

import fastapi
import PIL.Image
import playwright.async_api
from src.dependencies import browserDI, committerDI, querierDI
from src.models import AppState, Devices, OrderDTO
from src.utils.hals.printers.tspl import TSPL
from src.utils.renderers import html_renderer
from src.utils.stdlibs.str_utils import uuid_to_b64

TEMPLATE_PATH = pathlib.Path("src/templates/label.html")
TEMPLATE: str = TEMPLATE_PATH.read_text()

logger = logging.getLogger(__name__)
router = fastapi.APIRouter(prefix="/label")


def _get_render_context_from_order(order: OrderDTO) -> dict[str, str]:
    # TODO: FIXME: 지금이야 단건 주문만 가능하지만, 만약 여러 상품을 한번에 주문할 수 있는 경우 수정 필요
    ticket_opr: OrderDTO.OrderProductRelationDTO = order.products[0]
    return {
        "user_name": ticket_opr.get_option_by_name("성함").custom_response or "",
        "user_org": ticket_opr.get_option_by_name("소속").custom_response or "",
        "qrcode_data": uuid_to_b64(order.id),
    }


async def _get_rendered_image_from_order(order: OrderDTO, browser: playwright.async_api.Browser) -> bytes:
    ctx: dict[str, str] = _get_render_context_from_order(order)
    img: bytes = await html_renderer.render_html(browser=browser, template=TEMPLATE, context=ctx, element="#container")
    return html_renderer.image_to_bw(image=img)


@router.get(
    path="/preview",
    responses={
        http.HTTPStatus.OK: {"content": {"image/png": {}}},
        http.HTTPStatus.UNPROCESSABLE_ENTITY: {"description": "고객 정보가 없습니다."},
        http.HTTPStatus.INTERNAL_SERVER_ERROR: {"description": "미리보기 생성 중 오류가 발생했습니다."},
    },
    # Prevent FastAPI from adding "application/json" as an additional
    # response media type in the autogenerated OpenAPI specification.
    # https://github.com/tiangolo/fastapi/issues/3258
    response_class=fastapi.responses.Response,
)
async def preview_label(state: querierDI, browser: browserDI) -> fastapi.responses.Response:
    """라벨 출력 미리보기 API"""
    state.check_order_available()
    image: bytes = await _get_rendered_image_from_order(order=state.order, browser=browser)
    return fastapi.responses.Response(content=image, media_type="image/png")


@router.post(path="/print")
async def print_label(state: querierDI, committer: committerDI, browser: browserDI) -> AppState:
    """라벨 출력 API"""
    state.check_order_available()
    image: bytes = await _get_rendered_image_from_order(order=state.order, browser=browser)
    with io.BytesIO(image) as image_io:
        with PIL.Image.open(image_io) as img:
            tspl = TSPL(size=(80, 40), gap=3)
            with tspl as printer:
                with printer.page as page:
                    with page.image_buffer as img_buf:
                        img_buf.write(image=img)

            printer_list: list[Devices.USBDevice] = state.printers.copy()
            for printer in state.printers:
                try:
                    tspl.print(printer.cdc_path)
                except Exception as e:
                    printer_list.remove(printer)
                    logger.error("Failed to print label:\n", traceback.format_exception(e))
            state.printers = printer_list

    return committer(state)
