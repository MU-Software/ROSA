import http
import pathlib

import fastapi
import PIL.Image
from src.dependencies import browserDI, querierDI
from src.models import AppState, OrderDTO
from src.utils.hals.printers.tspl import TSPL
from src.utils.renderers import html_renderer

TEMPLATE_PATH = pathlib.Path("src/templates/label.html")
TEMPLATE: str = TEMPLATE_PATH.read_text()

router = fastapi.APIRouter(prefix="/label")


@router.get(
    path="/preview",
    responses={
        http.HTTPStatus.OK: {"content": {"image/png": {}}},
        http.HTTPStatus.UNPROCESSABLE_ENTITY: {"description": "고객 정보가 없습니다."},
        http.HTTPStatus.INTERNAL_SERVER_ERROR: {"description": "미리보기 생성 중 오류가 발생했습니다."},
    },
    # Prevent FastAPI from adding "application/json" as an additional
    # response media type in the autogenerated OpenAPI specification.
    # https://github.com/tiangolo/fastapi/issues/3258
    response_class=fastapi.responses.Response,
)
async def preview_label(state: querierDI, browser: browserDI) -> fastapi.responses.Response:
    """라벨 출력 미리보기 API"""
    state.check_order_available()

    # TODO: FIXME: 지금이야 단건 주문만 가능하지만, 만약 여러 상품을 한번에 주문할 수 있는 경우 수정 필요
    ticket_opr: OrderDTO.OrderProductRelationDTO = state.order.products[0]
    context = {
        "user_name": ticket_opr.get_option_by_name("성함").custom_response or "",
        "user_org": ticket_opr.get_option_by_name("소속").custom_response or "",
        "qrcode_data": str(state.order.id),
    }
    image: bytes = await html_renderer.render_html(
        browser=browser, template=TEMPLATE, context=context, element="#container"
    )
    image = html_renderer.image_to_bw(image=image)
    return fastapi.responses.Response(content=image, media_type="image/png")


@router.post(path="/print")
async def print_label(state: querierDI, browser: browserDI) -> AppState:
    """라벨 출력 API"""
    state.check_order_available()

    # TODO: FIXME: 지금이야 단건 주문만 가능하지만, 만약 여러 상품을 한번에 주문할 수 있는 경우 수정 필요
    ticket_opr: OrderDTO.OrderProductRelationDTO = state.order.products[0]
    context = {
        "user_name": ticket_opr.get_option_by_name("성함") or "",
        "user_org": ticket_opr.get_option_by_name("소속") or "",
        "qrcode_data": state.order.id,
    }
    image: bytes = await html_renderer.render_html(
        browser=browser, template=TEMPLATE, context=context, element="#container"
    )
    image = html_renderer.image_to_bw(image=image)

    tspl = TSPL()
    with tspl as printer:
        with printer.page as page:
            with page.image_buffer as img_buf:
                img_buf.write(image=PIL.Image.frombytes(data=image))

    # TODO: FIXME: 실제 프린터로 출력하는 코드 작성해야 함
    # tspl.print()

    return state
